// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static boolean color;
    static Array p;
    static Array src;


    /** Initializes the Screen. */
    function void init() {
        let p = Array.new(16);
        let p[0]=1;
        let p[1]= p[0]+p[0];
        let p[2]= p[1]+p[1];
        let p[3]= p[2]+p[2];
        let p[4]= p[3]+p[3];
        let p[5]= p[4]+p[4];
        let p[6]= p[5]+p[5];
        let p[7]= p[6]+p[6];
        let p[8]= p[7]+p[7];
        let p[9]= p[8]+p[8];
        let p[10]= p[9]+p[9];
        let p[11]= p[10]+p[10];
        let p[12]= p[11]+p[11];
        let p[13]= p[12]+p[12];
        let p[14]= p[13]+p[13];
        let p[15]= p[14]+p[14];
        let color =true;
        let src =16384;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        let i = 0;
        while (i < 8192) {
            do Memory.poke(16384+ i, 0);
            let i = i + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {

        let color= b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color . */
    function void drawPixel(int x, int y) {
        var int address, data, mod, divX;
        if(~(Screen.checkPixelIndex(x,y))){ //check for invalidation
            do Sys.error(7);
        }
        let divX= Screen.divSixteen(x);
        let address =16384 +(y*32) + (divX);
        let data  = Memory.peek(address); //getting the data
        let mod = x &15; // modulo 16

        if (color) { //if the pixel need to be blackened
            let data = data|p[mod];
        }else{
            let data = data &(~(p[mod]));
        }
        do Memory.poke(address, data); //setting the new data
        return;

    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2) ,  using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int temp;
        if(~(Screen.checkLineIndex(x1,y1,x2, y2))){
            do Sys.error(8);
        }
        if(x1>x2){
            let temp =x1;
            let x1= x2;
            let x2= temp;
            let temp =y1;
            let y1= y2;
            let y2= temp;
        }
        if((x1=x2)|(y1=y2)){
            do Screen.drawStraightLine(x1,y1,x2,y2);
        }else{

            do Screen.drawDiagonalLine(x1,y1,x2,y2);

        }


        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        if(~(Screen.checkLineIndex(x1,y1,x2, y2))){
            do Sys.error(9);
        }
        while((y1<y2) | (y1=y2)){ // draw the rectangle
            do Screen.drawHorizontalLine(x1,y1,x2);
            let  y1= y1+1;
        }
        return;
    }

    function int drawFastLine(int x1, int y, int x2,int mod){
        var int address, value;
        let value = Screen.setColoringValue();
        let address= (y*32)+ (Screen.divSixteen(x1));
        while((x1<x2)){
            let src[address]= value;
            let x1= x1+16;
            let address= address+1;
        }
        if(mod=15){
            let src[address] =value;
            let x1=x1+16;
            let address= address+1;
        }
        return x1;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int x1,y1,x2,y2,dy;
        if (r>181){
            do Sys.error(13);
        }
        if(~(Screen.checkCircleValidation(x,y,r))){ //check for invalidation
            do Sys.error(12);
        }

        let dy = ~(r)+1; //-r
        while(~(dy>r)){
            let x1 = x- Math.sqrt((r*r)-(dy*dy));
            let y1 = y+dy;
            let x2 = x+ Math.sqrt((r*r)-(dy*dy));

            do Screen.drawHorizontalLine(x1,y1,x2);
            let dy=dy+1;
        }

        return;
    }

    /** check the pixel coordinates index for invalidation */
    function boolean checkPixelIndex(int x, int y){
        if(x<0 | x>511 | y<0| y>255){
            return false;
        }else{
            return true;
        }
    }

    /** check the line coordinates indexes for invalidation */
    function boolean checkLineIndex(int x1, int y1, int x2, int y2){
        if(Screen.checkPixelIndex(x1,y1) & Screen.checkPixelIndex(x2,y2) ){
            return true;
        }else{
            return false;
        }
    }
    /**check the  circle validation*/
    function boolean checkCircleValidation(int x,int y,int r) {
        var int x1,x2,y1,y2;
        let x1= x-r;
        let x2 = x+r;
        let y1 = y-r;
        let y2 = y+r;
        if(~(Screen.checkPixelIndex(x,y)) & x1<0 & y1<0 & x2>511 & y2>255){
            return false;
        }else{
            return true;
        }
    }
    /** draws a straight line  - vertical or horizontal*/
    function void drawStraightLine(int x1, int y1, int x2, int y2){
        if(y1=y2){ // in case of vertical line
            do Screen.drawHorizontalLine(x1,y1,x2);
        }else{ // in case of horizontal line
            do Screen.drawVerticalLine(x1,y1,y2);
        }
        return;
    }
    /** draws a horizontal line*/
    function void drawHorizontalLine(int x1 , int y1, int x2){
        var int mod,i,xDivBy16;



        /**
         * 1. print the simple part
         * 2. print before
         * 3. print after
         *
         *
         *
         *
         */
        var int x1_simple, x2_simple;
        var int beforeRegister, afterRegister;
        var int screen, pixelsInRow, pixelsInCol, registersInRow;


        let x2 = x2 + 1;



        let screen = 16384;
        let pixelsInRow = 512; // max x, max col
        let pixelsInCol = 256; // max y, max row
        let registersInRow = 32; //


        let x1_simple = x1 + 16 - (x1 &15);
        let x2_simple = x2 - (x2 &15);

        // TODO my Draw fast line!!!

        // find correct memory register address:
        let beforeRegister = Screen.divSixteen(x1) + (32 * y1);
        let afterRegister = Screen.divSixteen(x2) + (32 * y1);

        //let screen[0] = Math.pow2(Math.mod16(x2)) - 1;

//        let x1 = x1 - 1;

        if (color) {
            if (beforeRegister = afterRegister){
                let screen[afterRegister] = screen[afterRegister] | ( (Math.pow2(Math.mod16(x2)) - 1) & (~(Math.pow2(Math.mod16(x1)) - 1)) );
            }
            else{
                let screen[ afterRegister] = screen[ afterRegister] | (Math.pow2(Math.mod16(x2)) - 1);
                let screen[ beforeRegister] = screen[beforeRegister] | (~(Math.pow2(Math.mod16(x1)) - 1));// 2^mod(x2) - 1;
                let i = beforeRegister + 1;
                while (i < (afterRegister)) {
                    let screen[ i] =-1;
                    let i = i + 1;

                }
            }
        }
        else {
            if (beforeRegister = afterRegister){
                    let screen[ afterRegister] = screen[afterRegister] & (~((Math.pow2(Math.mod16(x2)) - 1) & (~(Math.pow2(Math.mod16(x1)) - 1))));
            }
            else{
                //let screen[ beforeRegister] = screen[ beforeRegister] & (Math.pow2(Math.mod16(x2)) - 1);
                let screen[ afterRegister] = screen[ afterRegister] & (~(Math.pow2(Math.mod16(x2)) - 1));
                let screen[ beforeRegister] = screen[ beforeRegister] & ((Math.pow2(Math.mod16(x1)) - 1));// 2^mod(x2) - 1;

                let i = beforeRegister + 1;
                while (i < (afterRegister)) {
                    let screen[ i] =0;
                    let i = i + 1;

                }
            }

        }


        //let screen[beforeRegister] = Math.pow2(Math.mod16(x2)) - 1; gives the first 3
        return;
        //-----------------------------------------




//
//        // ---------------------------------------
//        let i=0;
//        //let xDivBy16= Screen.divSixteen(x2);
//        let mod = x1 &15; // modulo 16
//        if(~(mod=0)){ // start drawing the line
//            let mod = 16 - mod;
//            while ((~(i = mod)) & (~(x1>x2))){
//                do Screen.drawPixel(x1,y1);
//                let x1 = x1 +1;
//                let i= i+1;
//            }
//        }
//
//        let mod = x2& 15; //modulo 16
//
//        let x1 = Screen.drawFastLine(x1,y1,x2-mod,mod); // draw the middle of the line
//        // ??????????????
//        if( ~(mod=15)){ // ending drawing the line
//            let i =-1;
//            while ((~(i=mod)) & (~(x1>x2))){
//                do Screen.drawPixel(x1,y1);
//                let x1 = x1 +1;
//                let i= i+1;
//            }
//        }
//        return;
//        //------------------------------------------
    }

    /**draw a vertical line*/
    function void drawVerticalLine(int x1 , int y1 , int y2){
        var int temp;
        if(y1>y2){
            let temp= y1;
            let y1 =y2;
            let y2 =temp;
        }
        while(~(y1>y2)){
            do Screen.drawPixel(x1,y1);
            let y1 = y1+1;
        }
        return;
    }

    /** draw a diagonal line*/
    function void drawDiagonalLine(int x1, int y1, int x2 , int y2){
        var int a,b,diff,dy,dx,absDy;
        let a =0;
        let b =0;
        let diff= 0;
        let dx = x2- x1;
        let dy = y2 -y1;
        let absDy = Math.abs(dy);
        while(~((a>dx))&(~(b>absDy))){
            if(dy<0){
                do Screen.drawPixel(x1+a, y1-b);
            }else{
                do Screen.drawPixel(x1+a, y1+b);
            }
            if(diff<0){
                let a = a+1;
                if(dy<0){
                    let diff =diff-dy;
                }else{
                    let diff =diff +dy;
                }
            }else{
                let b =b+1;
                let diff =diff -dx;
            }
        }
        return;
    }
    /** divide six fast*/
    function int divSixteen(int num) {
    		var int r, i;
    		let r = 0;
    		let i = 4;
    		while (i < 16) {
    			if ((num & p[i]) = p[i]) {
    				let r = r + p[i - 4];
    			}
    			let i = i + 1;
    		}
    		return r;
    	}

    function int getBitsArray(int index){
        return p[index];
    }

    /** set the coloring value for the horizontal line*/
    function int setColoringValue(){
        if(color){
            return -1;
        }else{
            return 0;
        }
    }

}
