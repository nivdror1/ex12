// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    /** the array that contain the String*/
    field Array strArray;

    /** the length of the String*/
    field int strLength;

    /** max length of the String*/
    field int maxLen;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if(maxLength=0){
            do Sys.error(14);
            return this;
        }
        if(maxLength =0){
                    let maxLength =1;
                }
        let strArray = Array.new(maxLength);
        let strLength = 0;
        let maxLen = maxLength;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        let strLength = 0;
        do Memory.deAlloc(strArray);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return strLength;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if(j<strLength & j>0){
            return strArray[j];
        }
        else{
            do Sys.error(15);
            return 0;
        }
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if(j<strLength & j>0){
            let strArray[j] = c;
            return;
        }else{
            do Sys.error(16);
            return;
        }

    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if(strLength<maxLen){
            let strLength = strLength +1;
            let strArray[strLength] =c;
             return this;
        }else{
             do Sys.error(17);
             return 0;
        }
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
       if(strLength>0){
            let strLength = strLength -1;
            return;
       }else{
            do Sys.error(18);
            return;
       }
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int index,result;
        var boolean flag;
        let result=0;
        let index =0;
        while((index=strLength | strArray[index]>48 |strArray[index]>57) |(index=0 & strArray[index] =45)){
            if(strArray[index]=45){
                let flag= true;
            }
            let result =(result*10) +(strArray[index]-48);
            let index = index+1;
        }
        if(flag){
            let result =result* (-1);
        }
        return result;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int counter;
        var boolean flag;
        let flag =false;
        let counter=0;
        do setIntHelper(counter, val,flag);
        return;
    }

    method void setIntHelper(int counter , int val, boolean flag){
        var int result;
        let result = val - ((val/10)*10);
        if(val<0){
            let flag = true;
            let counter= counter +1;
            let val = val*(-1);
        }
        if(result<10){
            let counter= counter+1;
            if(counter> strLength & counter<maxLen){
                do Sys.error(19);
                return;
            }
            let strLength = 0;
            if(flag){
                do appendChar(45);
            }
            do appendChar(result);
            return;
        }
        else {
            let counter = counter +1;
            do setIntHelper(counter, val/10, flag);
            do appendChar(result);
            return;
        }
    }

    /** Returns the new line character. */
    function char newLine() {
        return 12;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 10;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
