function Math.pow2 0
push argument 0
push static 1
add
pop pointer 1
push that 0
return
function Math.mod16 0
push argument 0
push constant 15
and
return
function Math.init 1
push constant 0
pop local 0
push constant 16
call Array.new 1
pop static 1
label WHILE_EXP0
push local 0
push constant 16
lt
not
if-goto WHILE_END0
push local 0
push static 1
add
push local 0
call Math.powOf2 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Math.abs 0
push argument 0
push constant 0
gt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 0
return
label IF_FALSE0
push argument 0
neg
return
function Math.multiply 2
push argument 0
call Math.abs 1
push argument 1
call Math.abs 1
call Math.multiplyPositive 2
pop local 0
push argument 0
push constant 0
gt
push argument 1
push constant 0
lt
and
push argument 0
push constant 0
lt
push argument 1
push constant 0
gt
and
or
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 0
neg
pop local 0
label IF_FALSE0
push local 0
return
function Math.multiplyPositive 3
push constant 1
pop local 2
push constant 0
pop local 0
push argument 0
pop local 1
label WHILE_EXP0
push local 2
push constant 0
eq
not
not
if-goto WHILE_END0
push local 2
push argument 1
and
push local 2
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 0
push local 1
add
pop local 0
label IF_FALSE0
push local 1
push local 1
add
pop local 1
push local 2
push local 2
add
pop local 2
goto WHILE_EXP0
label WHILE_END0
push local 0
return
function Math.divide 2
push argument 1
push constant 0
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 3
call Sys.error 1
pop temp 0
label IF_FALSE0
push argument 0
call Math.abs 1
push argument 1
call Math.abs 1
push argument 1
call Math.abs 1
call Math.divideRecursia 3
pop local 0
push argument 0
push constant 0
gt
push argument 1
push constant 0
lt
and
push argument 0
push constant 0
lt
push argument 1
push constant 0
gt
and
or
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push local 0
neg
pop local 0
label IF_FALSE1
push local 0
return
function Math.divideRecursia 1
push argument 1
push argument 0
gt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
pop static 0
push constant 0
return
label IF_FALSE0
push argument 1
push constant 16383
gt
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push argument 1
pop static 0
push constant 1
return
label IF_FALSE1
push argument 0
push argument 1
push argument 1
add
push argument 1
call Math.divideRecursia 3
pop local 0
push argument 0
push static 0
sub
push argument 1
lt
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push local 0
push local 0
add
return
label IF_FALSE2
push static 0
push argument 1
add
pop static 0
push local 0
push local 0
add
push constant 1
add
return
function Math.sqrt 3
push argument 0
push constant 0
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 4
call Sys.error 1
pop temp 0
label IF_FALSE0
push constant 0
pop local 0
push constant 7
pop local 1
label WHILE_EXP0
push local 1
push constant 0
gt
push local 1
push constant 0
eq
or
not
if-goto WHILE_END0
push local 0
push local 1
push static 1
add
pop pointer 1
push that 0
add
pop local 2
push local 2
push constant 182
lt
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push local 2
push local 2
call Math.multiply 2
pop local 2
push local 2
push argument 0
lt
push local 2
push argument 0
eq
or
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push local 0
push local 1
push static 1
add
pop pointer 1
push that 0
add
pop local 0
label IF_FALSE2
label IF_FALSE1
push local 1
push constant 1
sub
pop local 1
goto WHILE_EXP0
label WHILE_END0
push local 0
return
function Math.powOf2 2
push constant 0
pop local 0
push constant 1
pop local 1
label WHILE_EXP0
push argument 0
push constant 0
eq
not
not
if-goto WHILE_END0
push local 1
push constant 2
call Math.multiply 2
pop local 1
push argument 0
push constant 1
sub
pop argument 0
goto WHILE_EXP0
label WHILE_END0
push local 1
return
function Math.max 0
push argument 0
push argument 1
gt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 0
return
label IF_FALSE0
push argument 1
return
function Math.min 0
push argument 0
push argument 1
gt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 1
return
label IF_FALSE0
push argument 0
return
