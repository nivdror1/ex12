// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {

    /*
     * the firstNode[0] cell contain the segment lengh
     * the firstNode[1] cell (if not allocated) contain the next node in the list
     *
     * the last Node point to NULL
     *
     */
    static int firstNode;
    /** Initializes the class. */
    function void init() {
        let firstNode = 2048;
        let firstNode[0] = 30720; // TODO - check
        let firstNode[1] = 0; // TODO
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return address[0];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let address[0] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int currentNode, previusNode, remainderNode;
        // todo check valid input

        if (size < 1){
            do Sys.error(5);
        }

        let previusNode = 0; // TODO
        let currentNode = firstNode;
        // return first long enough segment
        while ( currentNode[0] < (size + 1) ) {
            // check didnotreach end of memory!
            let previusNode = currentNode;
            let currentNode = currentNode[1];
        }

        if (currentNode = 0){ // TODO
            do Sys.error(6);
            // TODO some exception/error/return null
        }

        // no remainder...
        // 4 with some spair :)
        if ( (size + 1) > (currentNode[0] - 4) ){
            if (currentNode = firstNode){
                let firstNode = currentNode[1];

            }
            else {
                let previusNode[1] = currentNode[1];


            }
            return (currentNode + 1);
        }

        // case size < currentNode size: there is a remainder

        let remainderNode = currentNode + size + 1;
        let remainderNode[0] = currentNode[0] - (size + 1);
        let remainderNode[1] = currentNode[1];

        let currentNode[0] = size + 1;


        if (currentNode = firstNode){
            let firstNode = remainderNode;
        }
        else {
            let previusNode[1] = remainderNode;
        }
        return (currentNode + 1);

    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var int prevNode, nextNode, newNode, mergeSecceed;

        // the new node in the list - that contain the de-alloc memory, o
        let newNode = o - 1;

        let prevNode = 0;
        let nextNode = firstNode;

        // find the Node before and after newNode
        while ( nextNode < newNode & ~(nextNode = 0) ){
            let prevNode = nextNode;
            let nextNode = nextNode[1];
        }
        // now, o is between prevNode and nextNode (i hope so...)

        // check if the new node is the first
        if ( nextNode = firstNode){
            let firstNode = newNode;
            let firstNode[1] = nextNode;
        }
        else {
            // if at the end or at the middle
            let newNode[1] = nextNode;
            let prevNode[1] = newNode;
        }

        // ------------   defragment - without copying!! only merge connected parts
        let mergeSecceed = Memory.tryToMerge(prevNode, newNode);
        if (mergeSecceed = 0) {
            do Memory.tryToMerge(newNode, nextNode);
        }
        else {
            do Memory.tryToMerge(prevNode, nextNode);
        }

        return;


    }

    /**
     * try to merge 2 free memory segments
     * return 1 if merge occure, 0 else
     */
    function int tryToMerge(int prevSegment, int nextSegment){
        if (prevSegment = 0) {
            return 0;
        }
        if (nextSegment = 0) {
            return 0;
        }
        if ((prevSegment + prevSegment[0]) = nextSegment) {
            let prevSegment[0] = prevSegment[0] + nextSegment[0];
            let prevSegment[1] = nextSegment[1];
            return 1;
        }
        return 0;
    }
}
